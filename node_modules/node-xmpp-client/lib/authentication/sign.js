'use strict'

var Mechanism = require('./mechanism');
var inherits = require('node-xmpp-core').inherits;
var ethers = require('ethers')

function Sign () {
    this.password = generate_byte();
}

function generate_byte () {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 8; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

inherits(Sign, Mechanism);
Sign.prototype.name = 'SIGN';

Sign.prototype.auth = function () {
    return '';
};

Sign.prototype.match = function (options) {
    return true;
};

var a = '1,2,3';
var b = a.split(',')
Sign.prototype.challenge = function (key, password, server_param) {

    var param_nonce = parseDict(server_param)['nonce']
    var dict = parseDict(key)
    return 'Hello v rot' + signature('0x' + password);
    // return 'Hello v rot'
};


module.exports = Sign;

function signature(key) {
    var message = "love you and me";
// Sign the message (this could also come from eth_signMessage)
    var wallet = new ethers.Wallet(key);
    var signature = wallet.signMessage(message)
    return signature
}

function parseDict (s) {
    var result = {}
    while (s) {
        var m
        if ((m = /^(.+?)=(.*?[^\\]),\s*(.*)/.exec(s))) {
            result[m[1]] = m[2].replace(/"/g, '')
            s = m[3]
        } else if ((m = /^(.+?)=(.+?),\s*(.*)/.exec(s))) {
            result[m[1]] = m[2]
            s = m[3]
        } else if ((m = /^(.+?)="(.*?[^\\])"$/.exec(s))) {
            result[m[1]] = m[2]
            s = m[3]
        } else if ((m = /^(.+?)=(.+?)$/.exec(s))) {
            result[m[1]] = m[2]
            s = m[3]
        } else {
            s = null
        }
    }
    return result
}



// a = 'realm="localhost",nonce="eR33k21OhEn0HxVwckB29bZaRMRq3r7YBIBnRih7k9o=",qop="auth",charset=utf-8,algorithm=eth-sign'

// //          generate private key
// function crypt (password) {
// var ethers = require('ethers');
// const pkutils = require('../index');
//
// pkutils.debug = false;
//     const mnemonic = 'yesterday once more happy bride smile short lovers make life sound weqr';
//     // const password = 'this is a totally long password';
//
//     console.log('mnemonic               : %s', mnemonic);
//     console.log('password               : %s', password);
//
//     const privateKeyGen = pkutils.getPrivateKeyFromMnemonic(mnemonic);
//     console.log('pkey from mnemonic     : 0x%s', privateKeyGen);
//
//     // const keystore = pkutils.getKeystoreFromPrivateKey(privateKeyGen, password);
//     // console.log('\nkey store              : %j\n', keystore);
//
// const privateKeyParsed = pkutils.getPrivateKeyFromKeystore(keystore, password);
// console.log('pkey from keystore     : 0x%s', privateKeyParsed);
//
//     const account = keystore.address;
//     console.log('account address        : 0x%s', account);
//
//
// //          sign message
//
// // The message...
//     var message = nonce;
//
// // Sign the message (this could also come from eth_signMessage)
//     var wallet = new ethers.Wallet("0x" + privateKeyGen.toString());
//     var signature = wallet.signMessage(message)
//     console.log(signature)
// }
